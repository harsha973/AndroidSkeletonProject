package com.in.sha.skeletonproject.utils;

import android.content.Context;

import com.google.android.gms.analytics.GoogleAnalytics;
import com.google.android.gms.analytics.HitBuilders;
import com.google.android.gms.analytics.Tracker;
import com.in.sha.skeletonproject.BuildConfig;
import com.in.sha.skeletonproject.R;

import java.util.HashMap;
import java.util.Map;

/**
 * A collection of Google Analytics trackers. Fetch the tracker you need using
 * {@code AnalyticsTrackers.getInstance().get(...)}
 * <p/>
 * This code was generated by Android Studio but can be safely modified by
 * hand at this point.
 * <p/>
 * TODO: Call {@link #initialize(Context)} from an entry point in your app
 * before using this!
 */
public final class AnalyticsTrackers {

    public static final String SCREEN_LABEL_HOME_SCREEN = "Home screen";

    public enum Target {
        APP,
        // Add more trackers here if you need, and update the code in #get(Target) below
    }
 
    private static AnalyticsTrackers sInstance;
 
    public static synchronized void initialize(Context context) {
        if (sInstance != null) {
            throw new IllegalStateException("Extra call to initialize analytics trackers");
        }
 
        sInstance = new AnalyticsTrackers(context);
    }
 
    public static synchronized AnalyticsTrackers getInstance() {
        if (sInstance == null) {
            throw new IllegalStateException("Call initialize() before getInstance()");
        }
 
        return sInstance;
    }
 
    private final Map<Target, Tracker> mTrackers = new HashMap<Target, Tracker>();
    private final Context mContext;
 
    /**
     * Don't instantiate directly - use {@link #getInstance()} instead.
     */
    private AnalyticsTrackers(Context context) {
        mContext = context.getApplicationContext();
    }
 
    public synchronized Tracker get(Target target) {
        if (!mTrackers.containsKey(target)) {
            Tracker tracker;
            //  Comment below code when you are using this class
//            switch (target) {
//                case APP:
//                    tracker = GoogleAnalytics.getInstance(mContext).newTracker(R.xml.app_tracker);
//                    break;
//                default:
//                    throw new IllegalArgumentException("Unhandled analytics target " + target);
//            }
//            mTrackers.put(target, tracker);
        }
 
        return mTrackers.get(target);
    }

    /***
     * Tracking screen view
     *
     * @param screenName screen name to be displayed on GA dashboard
     */
    public static void trackScreenView(Context context, String screenName) {

        //	Enable analytics only for production.
        if(!BuildConfig.DEBUG_MODE && BuildConfig.FLAVOR.equals("prod"))
        {
            Tracker t = getGoogleAnalyticsTracker();

            // Set screen name.
            t.setScreenName(screenName);

            // Send a screen view.
            t.send(new HitBuilders.ScreenViewBuilder().build());

            GoogleAnalytics.getInstance(context).dispatchLocalHits();
        }
    }

    /***
     * Tracking Event using Google Analytics
     *
     */
    public static void trackEvent(Context context, final int categoryId, final int actionId) {

        //	Enable analytics only for production.
        if(!BuildConfig.DEBUG_MODE && BuildConfig.FLAVOR.equals("prod"))
        {
            Tracker t = getGoogleAnalyticsTracker();

            // Send a screen view.
            t.send(new HitBuilders.EventBuilder().
                    setCategory(context.getString(categoryId)).
                    setAction(context.getString(actionId)).
                    build());

            GoogleAnalytics.getInstance(context).dispatchLocalHits();
        }
    }
    public static synchronized Tracker getGoogleAnalyticsTracker() {
        AnalyticsTrackers analyticsTrackers = AnalyticsTrackers.getInstance();
        return analyticsTrackers.get(AnalyticsTrackers.Target.APP);
    }
}